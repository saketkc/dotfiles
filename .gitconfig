[user]
	name = Saket Choudhary
	email = saketkc@gmail.com
[push]
	default = matching
[credential]
    helper = cache --timeout=360000
[alias]
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=shortld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    le = log --oneline --decorate
    filelog = log -u
    fl = log -u
    dlc = diff --cached HEAD^
    dl = "!git ll -1"
    dr  = "!f() { git diff "$1"^.."$1"; }; f"
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    f = "!git ls-files | grep -i"
    grep = grep -Ii
    gr = grep -Ii
    la = "!git config -l | grep alias | cut -c 7-"
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"
    cp = cherry-pick
    st = status -s
    cl = clone
    ci = commit
    co = checkout
    br = branch 
    diff = diff --word-diff
    dc = diff --cached
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    logtree = log --graph --oneline --decorate --all
    ## Borrowed from https://gist.github.com/robmiller/6018582
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"
    # Delete a branch and recreate it from master â€” useful if you have, say,
    # a development branch and a master branch and they could conceivably go
    # out of sync
    recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

    # Fire up your difftool (e.g. Kaleidescope) with all the changes that
    # are on the current branch.
    code-review = difftool origin/master...

    # Given a merge commit, find the span of commits that exist(ed) on that
    # branch. Again, not so useful in itself, but used by other aliases.
    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

    # Find the commits that were introduced by a merge
    merge-log = "!git log `git merge-span .. $1`"
    # Show the changes that were introduced by a merge
    merge-diff = "!git diff `git merge-span ... $1`"
    # As above, but in your difftool
    merge-difftool = "!git difftool `git merge-span ... $1`"

    # Interactively rebase all the commits on the current branch
    rebase-branch = "!git rebase -i `git merge-base master HEAD`"

    #
    # Working with files
    #

    # Unstage any files that have been added to the staging area
    unstage = reset HEAD
    # Show changes that have been staged
    diffc = diff --cached

    # Mark a file as "assume unchanged", which means that Git will treat it
    # as though there are no changes to it even if there are. Useful for
    # temporary changes to tracked files
    assume = update-index --assume-unchanged
    # Reverse the above
    unassume = update-index --no-assume-unchanged
    # Show the files that are currently assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"

    # Checkout our version of a file and add it
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    # Checkout their version of a file and add it
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    # Delete any branches that have been merged into master
    # See also: https://gist.github.com/robmiller/5133264
    delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
